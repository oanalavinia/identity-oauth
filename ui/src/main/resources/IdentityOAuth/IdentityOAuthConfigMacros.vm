{{velocity output=false}}

## Identity OAuth Config macros
## - a set of macros useful for editing the OAuth-related configurations
## - this page should be included with #includeInContext("IdentityOAuth.IdentityOAuthConfigMacros")
##   so that it defines a few useful constants which you can use, includes javascript and stylesheee
##   extensions. The macros it defines should be called after all necessary variables are defined,
##   notably oauthProviderHint.
## lets the JavaScript and CSS extensions be loaded
#set ($mainReference = $services.model.createDocumentReference('', 'IdentityOAuth', 'WebPreferences'))
#if (!$services.licensing.licensor.hasLicensureForEntity($mainReference))
  $services.identityoauth.init()

  #macro (ioIncludeUIX)
    $xwiki.jsx.use('IdentityOAuth.IdentityOAuthConfigClass')
    $xwiki.ssx.use('IdentityOAuth.IdentityOAuthConfigClass')
  #end


  ## defines formId, propNamePrefixIO, propNamePrefixO, configDoc, objIO, objO
  #macro (initConfigObjects $configDocName $extraObjectClassPropPrefixes $translationPrefixesP)
    #set($formId = "${section.toLowerCase()}_${configDocName1}")
    #set($configDoc = $xwiki.getDocument($configDocName))
    #set($classNameIO="IdentityOAuth.IdentityOAuthConfigClass")
    #set($propNamePrefixIO="${configDoc.fullName}_${classNameIO}_0")
    #set($objIO = $configDoc.getObject($classNameIO))
    ## Handle translation prefixes.
    #set($translationPrefixes = [])
    #foreach($p in $translationPrefixesP)
      #set($nuts=$translationPrefixes.add($p))
    #end
    #set($nuts=$translationPrefixes.add('IdentityOAuth.IdentityOAuthConfigClass_'))
    ## Handle extra class properties.
    #foreach($x in $extraObjectClassPropPrefixes)
      #set($shhh = $x.add($x[0]))
      #set($x[0] = $configDoc.getObject($x[0]))
    #end
  #end

  ##
  ## Macros used in managing providers translations. t is for translation and tp for translation with parameters.
  ##
  #macro (alignWithTranslationPrefixes $name)
    #set($tn = [])
    #foreach($p in $translationPrefixes)
      #set($nuts=$tn.add("${p}${name}"))
    #end
  #end
  #macro (getTranslation $name $usage $translation)
    #alignWithTranslationPrefixes($name)
    #if ($usage == 'js')
      #set ($translation = $escapetool.javascript($services.localization.render($tn)))
    #else
      #set ($translation = $escapetool.xml($services.localization.render($tn)))
    #end
  #end
  ## Display translation.
  #macro (t $name $usage)
    #getTranslation($name $usage $translation)
    $translation
  #end
  ## Get translation with parameters.
  #macro (tp $name $params $usage $translation)
    #alignWithTranslationPrefixes($name)
    #set ($msg = $services.localization.render($tn, $params))##
    #if ($usage == 'js')
      #set ($translation = $escapetool.javascript($msg))
    #else
      #set ($translation = $escapetool.xml($msg))
    #end
  #end

  ## displayInput: displays the form element of the relevant property of the object having removed the
  ##   html macro around it.
  #macro (displayInput $property $obj)
    #set ($output = $doc.display($property, 'edit', $obj))
    #set ($output = $stringtool.removeStart($output, '{{html clean="false" wiki="false"}}'))
    #set ($output = $stringtool.removeEnd($output, '{{/html}}'))
    $output
  #end

  #macro (renderRedirectUrlInputAndHints)
    #displayInput ('redirectUrl', $objIO)<br/>
    <span class="xHint" id="redirectUrlAsExpected">#t('redirectUrl.asExpected')</span>
    <span class="xHint" id="redirectUrlAsServers">#t('redirectUrl.asExpectedServers')</span>
    <span class="xHint" id="redirectUrlAsBrowsers">#t('redirectUrl.asExpectedBrowsers')</span>
    <span class="xHint" id="redirectUrlDifferentOfAll">#t('redirectUrl.notAsExpectedAny')</span>
    <span class="xHint" id="redirectMakeItLikePredicted">##
      (<a href="#" onclick="return resetRedirectUrlBrowser()">#t('redirectUrl.recalc.predicted'))</a></span>
    <span class="xHint" id="redirectMakeItLikePredictedBrowser">##
      (<a href="#" onclick="return resetRedirectUrlBrowser()">#t('redirectUrl.recalc.browser'))</a></span>
    <span class="xHint" id="redirectMakeItLikePredictedServer">
      (<a href="#" onclick="return resetRedirectUrlServer()">#t('redirectUrl.recalc.server'))</a></span>
  #end

  #macro (calcReturnUrlsJS)
  <script type="text/javascript">
      #set($serverReturn=$xwiki.getURL('XWiki.XWikiLogin', 'login')) ## typically a host-absolute URL
      // serverReturn: $serverReturn
      #if($serverReturn.startsWith("http://") || $serverReturn.startsWith("https://"))
        ## all good
      #elseif($serverReturn.startsWith('/'))
        #set($absUrl = $xcontext.request.requestURL)
      // absUrl: $absUrl
        #set($serverReturn = "${absUrl.substring(0, $absUrl.indexOf('/',8))}${serverReturn}")
      #end
      #tp("redirectUrl.placeHolderMessage", ["${serverReturn}"], "js", $translation)
      window.placeHolderForRedirectUrl = "${translation}";
      var p = window.location.href.indexOf('/admin');
      window.browserReturnUrl = (p === -1 ?
              window.location.href :
              window.location.href.substring(0, p)) + "/login/XWiki/XWikiLogin"
  </script>
  #end

  #set($hasLoadedMacros=true)
#end
{{/velocity}}